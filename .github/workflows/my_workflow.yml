# noqa
name: Python Application Testing

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set environment variables
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
        echo "POSTGRES_HOST=postgres_db" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> $GITHUB_ENV
        echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> $GITHUB_ENV
        echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> $GITHUB_ENV
        echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> $GITHUB_ENV
        echo "MONGO_DB=${{ secrets.MONGO_DB }}" >> $GITHUB_ENV
        echo "MONGO_COLLECTION=${{ secrets.MONGO_COLLECTION }}" >> $GITHUB_ENV
        echo "DOCKER_PLATFORM=${{ secrets.DOCKER_PLATFORM }}" >> $GITHUB_ENV
        echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> $GITHUB_ENV
        echo "MONGO_DB_COLLECTION=${{ secrets.MONGO_DB_COLLECTION }}" >> $GITHUB_ENV
        echo "MONGO_DB_URI=${{ secrets.MONGO_DB_URI }}" >> $GITHUB_ENV

    - name: Build and run with docker-compose
      run: |
        docker compose up -d

    - name: Install dependencies
      run: pip install -e .

    - name: Create client.json
      env:
        CLIENT_SECRETS_JSON: ${{ secrets.CLIENT_SECRETS_JSON }}
      run: |
        echo "${CLIENT_SECRETS_JSON}" > src/services/google_oidc/client.json

    - name: Verify client.json
      run: |
        ls -alh src/services/google_oidc/
        cat src/services/google_oidc/client.json

    - name: Run and test
      run: |
        docker-compose exec -T app pytest

    - name: Cleanup
      run: docker compose down
      if: always()
